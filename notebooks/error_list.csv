error_code,error_summary,error_description
Improper Python usage,,
E0601,Used before assignment,
E0602,Undefined variable,
W0631,Undefined loop variable,
E0103,Not in loop,
E0104,Return outside function,
W0101,Unreachable,
W0109,Duplicate key,
Type errors,,
E1101,No member,
E1102,Not callable,
E1111,Assignment from no return,
E1120,No value for parameter,
E1121,Too many function args,
E1126,Invalid sequence index,
E1127,Invalid slice index,
E1128,Assignment from None,
E1130,Invalid unary operand type,
E1131,Unsupported binary operation,
E1135,Unsupported membership test,
E1136,Unsubscriptable object,
E0632,Unbalanced tuple unpacking,
E0633,Unpacking non-sequence,
Code complexity,,
R0102,Simplifiable if statement,
C0113,Unneeded not,
C0121,Singleton comparison,
W0125,Using constant test,
R0912,Too many branches,
R0101,Too many nested blocks,
R0913,Too many arguments,
R0914,Too many locals,
R0915,Too many statements,
W0612,Unused variable,
W0613,Unused argument,
W0104,Pointless statement,
W0107,Unnecessary pass,
Documentation and naming,,
C0111,Missing Docstring,
C0112,Empty Docstring,
C0102,Blacklisted name,
C0103,Invalid name,
E0102,Function redefined,
E0108,Duplicate argument name,
W0621,Redefined outer name,
W0622,Redefined builtin,
Imports,,
E9999,Forbidden imports,
E0401,Import error,
E0611,No name in module,
W0406,Import self,
W0404,Reimported,
W0401,Wildcard import,
C0411,Wrong import order,
C0413,Wrong import position,
C0412,Ungrouped imports,
C0410,Multiple imports,
W0611,Unused import,
Classes and objects,,
R0902,Too many instance attributes,
W0222,Different method signature,
E0101,Return in `__init__`,
W0212,Protected member access,
W0233,Bad parent init,
W0201,Attribute defined outside init,
E0203,Access to member before definition,
E0202,Method hidden,
E0302,Unexpected special method signature,
E0239,Inheriting from a non-class,
E0241,Duplicate bases,
E0211,No method argument,
E0213,`self` as the first argument,
R0201,No self use,
W0211,Bad static member,
Exceptions,,
W0702,Bare exception,
W0703,Exception is too generic,
W0705,Duplicate except blocks,
E0701,Bad exception order,
W0711,Binary op exception,
E0704,Misplaced bare raise,
E0702,Raising bad type,
E0710,Raising non-exception,
E0711,NotImplemented raised,
E0712,Catching non-exception,
Custom errors {#custom},,
E9998,Forbidden IO function,
E9996,Always returning in a loop,
E9991,Dynamic Execution,
Miscellaneous,,
E1305,Too many format args,
E1306,Too few format args,
W1303,Missing format argument key,
E1310,Bad str strip call,
W1305,Format combined specification,
W1401,Anomalous backslash in string,
W1503,Redundant unittest assert,
C0123,Unidiomatic type check,
W0102,Dangerous default value,
W0199,Assert on tuple,
Syntax errors {#syntax},,
E0001,Syntax Error,
E0002,Indentation Error,
Missing,,
E1137,:unsupported-assignment-operation (E1137): *%r does not support item assignment*,Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method) This message belongs to the typecheck checker.
R1703,:simplifiable-if-statement (R1703): *The if statement can be replaced with %s*,Used when an if statement can be replaced with 'bool(test)'. This message belongs to the refactoring checker.
R1704,:redefined-argument-from-local (R1704): *Redefining argument with the local name %r*,"Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment. This message belongs to the refactoring checker."
R1707,:trailing-comma-tuple (R1707): *Disallow trailing comma tuple*,"In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple. This message belongs to the refactoring checker. It can't be emitted when using Python < 3.0."
R1702,:too-many-nested-blocks (R1702): *Too many nested blocks (%s/%s)*,Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable. This message belongs to the refactoring checker.
R0123,:literal-comparison (R0123): *Comparison to literal*,"Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether. This message belongs to the basic checker."
R1701,":consider-merging-isinstance (R1701): *Consider merging these isinstance calls to isinstance(%s, (%s))*",Used when multiple consecutive isinstance calls can be merged into one. This message belongs to the refactoring checker.
E1138,:unsupported-delete-operation (E1138): *%r does not support item deletion*,Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method) This message belongs to the typecheck checker.
W0235,:useless-super-delegation (W0235): *Useless super delegation in method %r*,"Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO. This message belongs to the classes checker."
R1706,:consider-using-ternary (R1706): *Consider using ternary (%s if %s else %s)*,Used when one of known pre-python 2.5 ternary syntax is used. This message belongs to the refactoring checker.
E1139,:invalid-metaclass (E1139): *Invalid metaclass %r used*,"Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass. This message belongs to the typecheck checker."
E0118,:used-prior-global-declaration (E0118): *Name %r is used prior to global declaration*,"Emitted when a name is used prior a global declaration, which results in an error since Python 3.6. This message belongs to the basic checker. It can't be emitted when using Python < 3.6."
C0205,:single-string-used-for-slots (C0205): *Class __slots__ should be a non-string iterable*,"Used when a class __slots__ is a simple string, rather than an iterable. This message belongs to the classes checker."
W0111,:assign-to-new-keyword (W0111): *Name %s will become a keyword in Python %s*,Used when assignment will become invalid in future Python release due to introducing new keyword This message belongs to the basic checker.
E0402,:relative-beyond-top-level (E0402): *Attempted relative import beyond top-level package*,Used when a relative import tries to access too many levels in the current package. This message belongs to the imports checker.
